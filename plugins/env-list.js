const config = require('../config');
const { cmd, commands } = require('../command');
const { runtime } = require('../lib/functions');
const axios = require('axios');

// Fonction pour v√©rifier si une variable est "activ√©e"
function estActiv√©(valeur) {
    return valeur && valeur.toString().toLowerCase() === "true";
}

cmd({
    pattern: "env",
    alias: ["param√®tres", "variables"],
    desc: "Afficher les param√®tres du bot",
    category: "menu",
    react: "‚§µÔ∏è",
    filename: __filename
}, 
async (conn, mek, m, { from, quoted, reply }) => {
    try {
        // D√©finition du message des param√®tres
        let param√®tresBot = `‚ï≠‚îÅ‚îÅ‚îÅ„Äî *DRACULA-MD* „Äï‚îÅ‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚ñ∏‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÉ‚ñ∏‚îÉ‡πè *PARAM√àTRES ENV üß™*
‚îÉ‚ñ∏‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑¬∑¬∑‡πè
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï≠‚îÅ‚îÅ„Äî *Activ√© / D√©sactiv√©* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îá‡πè *Affichage Statut:* ${estActiv√©(config.AUTO_STATUS_SEEN) ? "Activ√© ‚úÖ" : "D√©sactiv√© ‚ùå"}
‚îá‡πè *R√©ponse Statut:* ${estActiv√©(config.AUTO_STATUS_REPLY) ? "Activ√© ‚úÖ" : "D√©sactiv√© ‚ùå"}
‚îá‡πè *R√©ponse Auto:* ${estActiv√©(config.AUTO_REPLY) ? "Activ√© ‚úÖ" : "D√©sactiv√© ‚ùå"}
‚îá‡πè *Sticker Auto:* ${estActiv√©(config.AUTO_STICKER) ? "Activ√© ‚úÖ" : "D√©sactiv√© ‚ùå"}
‚îá‡πè *Voix Auto:* ${estActiv√©(config.AUTO_VOICE) ? "Activ√© ‚úÖ" : "D√©sactiv√© ‚ùå"}
‚îá‡πè *R√©actions Perso:* ${estActiv√©(config.CUSTOM_REACT) ? "Activ√© ‚úÖ" : "D√©sactiv√© ‚ùå"}
‚îá‡πè *R√©action Auto:* ${estActiv√©(config.AUTO_REACT) ? "Activ√© ‚úÖ" : "D√©sactiv√© ‚ùå"}
‚îá‡πè *Suppression Liens:* ${estActiv√©(config.DELETE_LINKS) ? "Activ√© ‚úÖ" : "D√©sactiv√© ‚ùå"}
‚îá‡πè *Anti-Lien:* ${estActiv√©(config.ANTI_LINK) ? "Activ√© ‚úÖ" : "D√©sactiv√© ‚ùå"}
‚îá‡πè *Anti-Gros Mots:* ${estActiv√©(config.ANTI_BAD) ? "Activ√© ‚úÖ" : "D√©sactiv√© ‚ùå"}
‚îá‡πè *Saisie Auto:* ${estActiv√©(config.AUTO_TYPING) ? "Activ√© ‚úÖ" : "D√©sactiv√© ‚ùå"}
‚îá‡πè *Enregistrement Auto:* ${estActiv√©(config.AUTO_RECORDING) ? "Activ√© ‚úÖ" : "D√©sactiv√© ‚ùå"}
‚îá‡πè *Toujours En Ligne:* ${estActiv√©(config.ALWAYS_ONLINE) ? "Activ√© ‚úÖ" : "D√©sactiv√© ‚ùå"}
‚îá‡πè *Mode Public:* ${estActiv√©(config.PUBLIC_MODE) ? "Activ√© ‚úÖ" : "D√©sactiv√© ‚ùå"}
‚îá‡πè *Lecture Messages:* ${estActiv√©(config.READ_MESSAGE) ? "Activ√© ‚úÖ" : "D√©sactiv√© ‚ùå"}
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÄ‚îÄ‚îà‚ä∑
> ${config.DESCRIPTION}`;

        // Envoie du message avec image
        await conn.sendMessage(
            from,
            {
                image: { url: 'https://files.catbox.moe/juroe8.jpg' },
                caption: param√®tresBot,
                contextInfo: {
                    mentionedJid: [m.sender],
                    forwardingScore: 999,
                    isForwarded: true,
                    forwardedNewsletterMessageInfo: {
                        newsletterJid: '120363354023106228@newsletter',
                        newsletterName: "Pharouk Tech",
                        serverMessageId: 143
                    }
                }
            },
            { quoted: mek }
        );

        // Envoie du message vocal
        await conn.sendMessage(from, {
            audio: { url: 'https://github.com/XdTechPro/KHAN-DATA/raw/refs/heads/main/autovoice/menunew.m4a' },
            mimetype: 'audio/mp4',
            ptt: true
        }, { quoted: mek });

    } catch (error) {
        console.log(error);
        reply(`Erreur : ${error.message}`);
    }
});
