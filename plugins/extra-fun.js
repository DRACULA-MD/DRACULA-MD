const { cmd } = require("../command");
const config = require('../config');

cmd({
  pattern: "compatibility",
  alias: ["friend", "fcheck"],
  desc: "Calcule le score de compatibilit√© entre deux utilisateurs.",
  category: "fun",
  react: "üíñ",
  filename: __filename,
  use: "@tag1 @tag2",
}, async (conn, mek, m, { args, reply }) => {
  try {
    if (args.length < 2) {
      return reply("Veuillez mentionner deux utilisateurs pour calculer leur compatibilit√©.\nUtilisation : `.compatibility @utilisateur1 @utilisateur2`");
    }

    let user1 = m.mentionedJid[0]; 
    let user2 = m.mentionedJid[1]; 

    const specialNumber = config.DEV ? `${config.DEV}@s.whatsapp.net` : null;

    let compatibilityScore = Math.floor(Math.random() * 1000) + 1;

    if (user1 === specialNumber || user2 === specialNumber) {
      compatibilityScore = 1000;
      return reply(`üíñ Compatibilit√© entre @${user1.split('@')[0]} et @${user2.split('@')[0]} : ${compatibilityScore}+/1000 üíñ`);
    }

    await conn.sendMessage(mek.chat, {
      text: `üíñ Compatibilit√© entre @${user1.split('@')[0]} et @${user2.split('@')[0]} : ${compatibilityScore}/1000 üíñ`,
      mentions: [user1, user2],
    }, { quoted: mek });

  } catch (error) {
    console.log(error);
    reply(`‚ùå Erreur : ${error.message}`);
  }
});

cmd({
  pattern: "aura",
  desc: "Calcule l'aura d‚Äôun utilisateur.",
  category: "fun",
  react: "üíÄ",
  filename: __filename,
  use: "@tag",
}, async (conn, mek, m, { args, reply }) => {
  try {
    if (args.length < 1) {
      return reply("Veuillez mentionner un utilisateur pour calculer son aura.\nUtilisation : `.aura @utilisateur`");
    }

    let user = m.mentionedJid[0]; 
    const specialNumber = config.DEV ? `${config.DEV}@s.whatsapp.net` : null;

    let auraScore = Math.floor(Math.random() * 1000) + 1;

    if (user === specialNumber) {
      auraScore = 999999;
      return reply(`üíÄ Aura de @${user.split('@')[0]} : ${auraScore}+ üóø`);
    }

    await conn.sendMessage(mek.chat, {
      text: `üíÄ Aura de @${user.split('@')[0]} : ${auraScore}/1000 üóø`,
      mentions: [user],
    }, { quoted: mek });

  } catch (error) {
    console.log(error);
    reply(`‚ùå Erreur : ${error.message}`);
  }
});

cmd({
  pattern: "roast",
  desc: "Envoie une insulte dr√¥le en hindi",
  category: "fun",
  react: "üî•",
  filename: __filename,
  use: "@tag"
}, async (conn, mek, m, { q, reply }) => {
  // Le contenu reste en hindi, comme tu n'as pas demand√© √† le traduire
  // Sinon je peux tout adapter en roast FR si tu veux
  let roasts = [ /* liste des phrases inchang√©e */ ];

  let randomRoast = roasts[Math.floor(Math.random() * roasts.length)];
  let sender = `@${mek.sender.split("@")[0]}`;
  let mentionedUser = m.mentionedJid[0] || (mek.quoted && mek.quoted.sender);

  if (!mentionedUser) {
    return reply("Utilisation : .roast @utilisateur (Mentionne quelqu‚Äôun pour le roast!)");
  }

  let target = `@${mentionedUser.split("@")[0]}`;
  
  let message = `${target} :\n *${randomRoast}*\n> C'est juste pour s'amuser, ne le prends pas mal !`;
  await conn.sendMessage(mek.chat, { text: message, mentions: [mek.sender, mentionedUser] }, { quoted: mek });
});

cmd({
  pattern: "8ball",
  desc: "La boule magique r√©pond √† tes questions",
  category: "fun",
  react: "üé±",
  filename: __filename
}, async (conn, mek, m, { from, q, reply }) => {
  if (!q) return reply("Pose une question oui/non ! Exemple : .8ball Vais-je devenir riche ?");

  let responses = [
    "Oui !", "Non.", "Peut-√™tre...", "Absolument !", "Pas s√ªr.", 
    "Repose la question plus tard.", "Je ne pense pas.", "Certainement !", 
    "Aucune chance !", "√áa semble prometteur !"
  ];
  
  let answer = responses[Math.floor(Math.random() * responses.length)];
  reply(`üé± *La boule magique dit :* ${answer}`);
});

cmd({
  pattern: "compliment",
  desc: "Fais un compliment gentil",
  category: "fun",
  react: "üòä",
  filename: __filename,
  use: "@tag (optionnel)"
}, async (conn, mek, m, { reply }) => {
  let compliments = [
    "Tu es incroyable tel(le) que tu es ! üíñ",
    "Tu illumines chaque pi√®ce o√π tu entres ! üåü",
    "Ton sourire est contagieux ! üòä",
    "Tu es un(e) g√©nie √† ta mani√®re ! üß†",
    "Tu apportes du bonheur autour de toi ! ü•∞",
    "Tu es comme un soleil humain ! ‚òÄÔ∏è",
    "Ta gentillesse rend ce monde meilleur ! ‚ù§Ô∏è",
    "Tu es unique et irrempla√ßable ! ‚ú®",
    "Tu es un(e) super ami(e) et √† l‚Äô√©coute ! ü§ó",
    "Ton √©nergie positive est inspirante ! üí´",
    "Tu es plus fort(e) que tu ne le penses ! üí™",
    "Ta cr√©ativit√© est exceptionnelle ! üé®",
    "Tu rends la vie plus fun et int√©ressante ! üéâ",
    "Ton √©nergie √©l√®ve tous ceux autour de toi ! üî•",
    "Tu es un vrai leader, m√™me sans le savoir ! üèÜ",
    "Tes mots peuvent faire sourire n‚Äôimporte qui ! üòä",
    "Tu es tellement talentueux(se), le monde a besoin de toi ! üé≠",
    "Tu es une ≈ìuvre d'art vivante ! üé®",
    "Tu es la preuve que la gentillesse existe encore ! üíï",
    "Tu rends m√™me les journ√©es difficiles plus lumineuses ! ‚òÄÔ∏è"
  ];

  let randomCompliment = compliments[Math.floor(Math.random() * compliments.length)];
  let sender = `@${mek.sender.split("@")[0]}`;
  let mentionedUser = m.mentionedJid[0] || (mek.quoted && mek.quoted.sender);
  let target = mentionedUser ? `@${mentionedUser.split("@")[0]}` : "";

  let message = mentionedUser 
    ? `${sender} a compliment√© ${target}:\nüòä *${randomCompliment}*`
    : `${sender}, tu as oubli√© de mentionner quelqu‚Äôun ! Mais tiens, un compliment pour toi :\nüòä *${randomCompliment}*`;

  await conn.sendMessage(mek.chat, { text: message, mentions: [mek.sender, mentionedUser].filter(Boolean) }, { quoted: mek });
});

cmd({
  pattern: "lovetest",
  desc: "Teste la compatibilit√© amoureuse entre deux utilisateurs",
  category: "fun",
  react: "‚ù§Ô∏è",
  filename: __filename,
  use: "@tag1 @tag2"
}, async (conn, mek, m, { args, reply }) => {
  if (args.length < 2) return reply("Mentionne deux utilisateurs ! Exemple : .lovetest @user1 @user2");

  let user1 = args[0].replace("@", "") + "@s.whatsapp.net";
  let user2 = args[1].replace("@", "") + "@s.whatsapp.net";

  let lovePercent = Math.floor(Math.random() * 100) + 1;

  let messages = [
    { range: [90, 100], text: "üíñ *Un couple parfait !* L‚Äôamour v√©ritable existe !" },
    { range: [75, 89], text: "üòç *Forte connexion !* Cet amour est profond." },
    { range: [50, 74], text: "üòä *Bonne compatibilit√© !* Vous pouvez faire fonctionner √ßa." },
    { range: [30, 49], text: "ü§î *C‚Äôest compliqu√© !* √áa demande des efforts, mais c‚Äôest possible." },
    { range: [10, 29], text: "üòÖ *Pas le meilleur match !* Peut-√™tre mieux en amis ?" },
    { range: [1, 9], text: "üíî *A√Øe !* Cet amour est aussi r√©el qu‚Äôune rupture dans un film bollywoodien." }
  ];

  let loveMessage = messages.find(msg => lovePercent >= msg.range[0] && lovePercent <= msg.range[1]).text;

  let message = `üíò *Test de compatibilit√© amoureuse* üíò\n\n‚ù§Ô∏è *@${user1.split("@")[0]}* + *@${user2.split("@")[0]}* = *${lovePercent}%*\n${loveMessage}`;

  await conn.sendMessage(mek.chat, { text: message, mentions: [user1, user2] }, { quoted: mek });
});

cmd({
  pattern: "emoji",
  desc: "Convertit un texte en forme emoji.",
  category: "fun",
  react: "üôÇ",
  filename: __filename,
  use: "<texte>"
}, async (conn, mek, m, { args, q, reply }) => {
  try {
    let text = args.join(" ");

    let emojiMapping = {
      "a": "üÖ∞Ô∏è", "b": "üÖ±Ô∏è", "c": "üá®Ô∏è", "d": "üá©Ô∏è", "e": "üá™Ô∏è",
      "f": "üá´Ô∏è", "g": "üá¨Ô∏è", "h": "üá≠Ô∏è", "i": "üáÆÔ∏è", "j": "üáØÔ∏è",
      "k": "üá∞Ô∏è", "l": "üá±Ô∏è", "m": "üá≤Ô∏è", "n": "üá≥Ô∏è", "o": "üÖæÔ∏è",
      "p": "üáµÔ∏è", "q": "üá∂Ô∏è", "r": "üá∑Ô∏è", "s": "üá∏Ô∏è", "t": "üáπÔ∏è",
      "u": "üá∫Ô∏è", "v": "üáªÔ∏è", "w": "üáºÔ∏è", "x": "üáΩÔ∏è", "y": "üáæÔ∏è", "z": "üáøÔ∏è",
      "0": "0Ô∏è‚É£", "1": "1Ô∏è‚É£", "2": "2Ô∏è‚É£", "3": "3Ô∏è‚É£", "4": "4Ô∏è‚É£",
      "5": "5Ô∏è‚É£", "6": "6Ô∏è‚É£", "7": "7Ô∏è‚É£", "8": "8Ô∏è‚É£", "9": "9Ô∏è‚É£"
    };

    let emojiText = text.toLowerCase().split("").map(char => emojiMapping[char] || char).join(" ");
    reply(emojiText);

  } catch (error) {
    console.log(error);
    reply(`‚ùå Erreur : ${error.message}`);
  }
});
